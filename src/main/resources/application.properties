spring.application.name=friendplaylist

spring.security.oauth2.client.registration.spotify.client-id=${SPOTIFY_CLIENT_ID}

spring.security.oauth2.client.registration.spotify.client-secret=${SPOTIFY_CLIENT_SECRET}

spring.security.oauth2.client.registration.spotify.client-authentication-method=client_secret_basic
spring.security.oauth2.client.registration.spotify.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.spotify.redirect-uri=http://127.0.0.1:8081/login/oauth2/code/spotify

spring.security.oauth2.client.registration.spotify.client-name=Spotify

spring.security.oauth2.client.registration.spotify.scope=user-read-private,user-read-email,playlist-read-private

spring.security.oauth2.client.provider.spotify.authorization-uri=https://accounts.spotify.com/authorize
spring.security.oauth2.client.provider.spotify.token-uri=https://accounts.spotify.com/api/token
spring.security.oauth2.client.provider.spotify.user-info-uri=https://api.spotify.com/v1/me
spring.security.oauth2.client.provider.spotify.user-name-attribute=id

# As configurações do datasource (url, username, password) são fornecidas
# por variáveis de ambiente (ex: no docker-compose.yml para desenvolvimento local
# ou na configuração do ambiente AWS para produção).

server.port=8081


# --- Configuração do Banco de Dados PostgreSQL ---
# Os valores reais para url, username e password devem ser configurados
# como variáveis de ambiente no seu ambiente de deploy (AWS).
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

#spring.datasource.url=jdbc:postgresql:///friendplaylist?cloudSqlInstance=friendplaylists:southamerica-east1:friendplaylist-db
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
